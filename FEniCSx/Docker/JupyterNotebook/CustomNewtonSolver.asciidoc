+*In[1]:*+
[source, ipython3]
----
import dolfinx
from dolfinx import fem, mesh, plot, default_scalar_type

import dolfinx.fem.petsc
from dolfinx.fem.petsc import LinearProblem

import matplotlib.pyplot as plt
import numpy as np
import pyvista
import ufl
from mpi4py import MPI
from petsc4py import PETSc

from ufl import (Circumradius, FacetNormal, SpatialCoordinate, TrialFunction, TestFunction,
                 div, dx, ds, grad, inner)
----


+*In[2]:*+
[source, ipython3]
----
##We want to minimize u^2-2u=x^2+4x+3 in [0,1]
##The solns are u=-1-x, u=3+x

def root_0(x):#soln1
    return 3 + x[0]


def root_1(x):#soln2
    return -1 - x[0]

#Discretizing [0,1] into N slots.
N = 10
roots = [root_0, root_1]
x_spacing = np.linspace(0, 1, N)
----


+*In[3]:*+
[source, ipython3]
----
#Next, we define the mesh, and the appropriate function space and function uh to hold the approximate solution.
mesh = dolfinx.mesh.create_unit_interval(MPI.COMM_WORLD, N)#discretizing [0,1] into N parts.
#V = dolfinx.fem.FunctionSpace(mesh, ("Lagrange", 1))
V = fem.FunctionSpace(mesh, ("Lagrange", 1))
v = ufl.TestFunction(V)
x = ufl.SpatialCoordinate(mesh)
----


+*In[4]:*+
[source, ipython3]
----
#We will start with an initial guess u=1 for this problem. 
uh = fem.Function(V)
u_ex = 1
#uh.interpolate(dolfinx.fem.Expression(u_ex, V.element.interpolation_points() ))
uh.interpolate(fem.Expression(u_ex, V.element.interpolation_points()))
----


+*Out[4]:*+
----
Could not extract MPI communicator for Expression. Maybe you need to pass a communicator?


    ---------------------------------------------------------------------------

    AttributeError                            Traceback (most recent call last)

    Cell In[4], line 5
          3 u_ex = 1
          4 #uh.interpolate(dolfinx.fem.Expression(u_ex, V.element.interpolation_points() ))
    ----> 5 uh.interpolate(fem.Expression(u_ex, V.element.interpolation_points()))


    File /usr/local/dolfinx-real/lib/python3.10/dist-packages/dolfinx/fem/function.py:122, in Expression.__init__(self, e, X, comm, form_compiler_options, jit_options, dtype)
        120 if comm is None:
        121     try:
    --> 122         mesh = ufl.domain.extract_unique_domain(e).ufl_cargo()
        123         comm = mesh.comm
        124     except AttributeError:


    File /usr/local/lib/python3.10/dist-packages/ufl/domain.py:372, in extract_unique_domain(expr)
        370 def extract_unique_domain(expr):
        371     """Return the single unique domain expression is defined on or throw an error."""
    --> 372     domains = extract_domains(expr)
        373     if len(domains) == 1:
        374         return domains[0]


    File /usr/local/lib/python3.10/dist-packages/ufl/domain.py:365, in extract_domains(expr)
        363 """Return all domains expression is defined on."""
        364 domainlist = []
    --> 365 for t in traverse_unique_terminals(expr):
        366     domainlist.extend(t.ufl_domains())
        367 return sorted(join_domains(domainlist))


    File /usr/local/lib/python3.10/dist-packages/ufl/corealg/traversal.py:137, in traverse_unique_terminals(expr, visited)
        135 """Traverse unique terminals."""
        136 for op in unique_pre_traversal(expr, visited=visited):
    --> 137     if op._ufl_is_terminal_:
        138         yield op


    AttributeError: 'int' object has no attribute '_ufl_is_terminal_'

----


+*In[ ]:*+
[source, ipython3]
----
F = uh**2 * v * ufl.dx - 2 * uh * v * ufl.dx - (x[0]**2 + 4 * x[0] + 3) * v * ufl.dx
residual = dolfinx.fem.form(F)
----


+*In[ ]:*+
[source, ipython3]
----
#define the jacobian
J = ufl.derivative(F, uh)
jacobian = dolfinx.fem.form(J)
----


+*In[ ]:*+
[source, ipython3]
----
#As we will solve this problem in an iterative fashion, we would like to create the sparse matrix and vector containing the residual only once.
A = dolfinx.fem.petsc.create_matrix(jacobian)
L = dolfinx.fem.petsc.create_vector(residual)
----


+*In[ ]:*+
[source, ipython3]
----
#Next, we create the linear solver and the vector to hold dx.
solver = PETSc.KSP().create(mesh.comm)
solver.setOperators(A)
dx = dolfinx.fem.Function(V)
----


+*In[ ]:*+
[source, ipython3]
----
#We would like to monitor the evolution of uh for each iteration. Therefore, we get the dof coordinates, and sort them in increasing order.
i = 0
coords = V.tabulate_dof_coordinates()[:, 0]
sort_order = np.argsort(coords)
max_iterations = 25
solutions = np.zeros((max_iterations + 1, len(coords)))
solutions[0] = uh.x.array[sort_order]
----


+*In[ ]:*+
[source, ipython3]
----
#We are now ready to solve the linear problem. At each iteration,
#we reassemble the Jacobian and residual, and use the norm of the magnitude of the update (dx) as a termination criteria.
i = 0
while i < max_iterations:
    # Assemble Jacobian and residual
    with L.localForm() as loc_L:
        loc_L.set(0)
    A.zeroEntries()
    dolfinx.fem.petsc.assemble_matrix(A, jacobian)
    A.assemble()
    dolfinx.fem.petsc.assemble_vector(L, residual)
    L.ghostUpdate(addv=PETSc.InsertMode.ADD_VALUES, mode=PETSc.ScatterMode.REVERSE)

    # Scale residual by -1
    L.scale(-1)
    L.ghostUpdate(addv=PETSc.InsertMode.INSERT_VALUES, mode=PETSc.ScatterMode.FORWARD)

    # Solve linear problem
    solver.solve(L, dx.vector)
    dx.x.scatter_forward()
    # Update u_{i+1} = u_i + delta x_i
    uh.x.array[:] += dx.x.array
    i += 1

    # Compute norm of update
    correction_norm = dx.vector.norm(0)
    print(f"Iteration {i}: Correction norm {correction_norm}")
    if correction_norm < 1e-10:
        break
    solutions[i, :] = uh.x.array[sort_order]
----


+*In[ ]:*+
[source, ipython3]
----
#We now compute the magnitude of the residual.
dolfinx.fem.petsc.assemble_vector(L, residual)
print(f"Final residual {L.norm(0)}")
----


+*In[ ]:*+
[source, ipython3]
----
# Plot solution for each of the iterations
fig = plt.figure(figsize=(15, 8))
for j, solution in enumerate(solutions[:i]):
    plt.plot(coords[sort_order], solution, label=f"Iteration {j}")

# Plot each of the roots of the problem, and compare the approximate solution with each of them
args = ("--go",)
for j, root in enumerate(roots):
    u_ex = root(x)
    L2_error = dolfinx.fem.form(ufl.inner(uh - u_ex, uh - u_ex) * ufl.dx)
    global_L2 = mesh.comm.allreduce(dolfinx.fem.assemble_scalar(L2_error), op=MPI.SUM)
    print(f"L2-error (root {j}) {np.sqrt(global_L2)}")

    kwargs = {} if j == 0 else {"label": "u_exact"}
    plt.plot(x_spacing, root(x_spacing.reshape(1, -1)), *args, **kwargs)
plt.grid()
plt.legend()
----


+*In[ ]:*+
[source, ipython3]
----

----
